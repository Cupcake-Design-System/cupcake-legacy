
// Setup - Values may be edited - !!!DO NOT REMOVE THESE VARIABLES!!!
// ========================================================================== //
$auto-generate: true !default;
$row-namespace: '.c-row' !default;
$col-namespace: '.c-col' !default;
$row-default-wrap: 'wrap' !default;		// 'nowrap', 'wrap' or 'reverse'
$row-default-align: 'stretch' !default; // 'stretch', 'start', 'center', 'end' or 'baseline'
$row-default-content-stretch: 'unstretch' !default;	// 'stretch' or 'unstretch'
$gutter: $spacing-global-gutter !default;
$total-columns: 12 !default;
$container-fixed-width: $sizing-container-fixed-max-width !default;


// Optional row features - Set to true to enable
$row-align: true !default;
$row-justify: true !default;
$row-wrap: true !default;
$col-order: true !default;
$col-offset: true !default;
$col-align: true !default;
$gutter-collapse: true !default;


// Container Generator
// ==========================================================================
@mixin make-container($gutters: $gutter) {
  position: relative;
  margin-left: auto;
  margin-right: auto;
  padding-right: $gutter;
  padding-left: $gutter;
  flex: 1;
}

.c-container {
  @include make-container();
}

.c-container-fixed {
  @include make-container();

  width: $container-fixed-width;
  max-width: 100%;
}


// Utils
// ==========================================================================
@function format-breakpoint($breakpoint) {
  @return if($breakpoint, '-' + $breakpoint + '-', '-');
}

@function format-modifier($key, $val) {
  @return $key + '\\/' + $val;
}


// cols
// ==========================================================================
@mixin generate-all-cols() {
  @include create-cols();
}

@mixin create-cols($breakpoint: null) {
  $breakpoint: format-breakpoint($breakpoint);

  @for $i from 1 through $total-columns {
    & > #{$col-namespace}#{$breakpoint}#{$i} {
      @include create-col($i);
    }
  }
}

// Accepts number input
//	- @include create-col(3)
@mixin create-col($column: 1) {
  flex: 0 0 auto;

  @if (type-of($column) != number) {
    @error "create-col: Please define a number variable.";
  }

  width: (100% / $total-columns) * $column;
}

// Content stretch behavior of all cols within a row section
// ==========================================================================
@mixin row-content-stretch($value: 'stretch') {
  $values: (stretch: 'flex', unstretch: 'inline-block');

  @if map-has-key($values, $value) {
    .c-col {
      @include col-content-stretch($value);
    }
  }

  @else {
    @error "row-content-stretch: Please enter a valid property;"stretch", or"unstretch"";
  }
}

@mixin generate-row-content-stretch($breakpoint: null) {
  $breakpoint: format-breakpoint($breakpoint);

  &#{$breakpoint}content-stretch {
    @include row-content-stretch('stretch');
  }

  &#{$breakpoint}content-unstretch {
    @include row-content-stretch('unstretch');
  }
}


// Justify individual cols
// ==========================================================================
@mixin row-justify($value: null) {
  $values: (
    start: 'flex-start',
    end: 'flex-end',
    center: 'center',
    space-between: 'space-between',
    space-around: 'space-around');

  @if map-has-key($values, $value) {
    justify-content: #{map-get($values, $value)};
  }

  @else {
    @error "justify-content: Please enter a valid property;"flex-start","flex-end","center","space-between"or"space-around"";
  }
}

@mixin generate-row-justify($breakpoint: null) {
  $breakpoint: format-breakpoint($breakpoint);

  &#{$breakpoint}justify {
    &-start {
      @include row-justify(start);
    }

    &-end {
      @include row-justify(end);
    }

    &-center {
      @include row-justify(center);
    }

    &-space-between {
      @include row-justify(space-between);
    }

    &-space-around {
      @include row-justify(space-around);
    }
  }
}

// Alignment of all cols within a row section
// ==========================================================================
@mixin row-align($value: 'stretch') {
  $values: (
    stretch: 'stretch',
    start: 'flex-start',
    center: 'center',
    end: 'flex-end',
    baseline: 'baseline');

  @if map-has-key($values, $value) {
    align-items: #{map-get($values, $value)};
  }

  @else {
    @error "row-align: Please enter a valid property;"flex-start","flex-end","center","stretch", or"baseline"";
  }
}

@mixin generate-row-align($breakpoint: null) {
  $breakpoint: format-breakpoint($breakpoint);

  &#{$breakpoint}align-stretch {
    @include row-align();
  }

  &#{$breakpoint}align-start {
    @include row-align('start');
  }

  &#{$breakpoint}align-end {
    @include row-align('end');
  }

  &#{$breakpoint}align-center {
    @include row-align('center');
  }

  &#{$breakpoint}align-baseline {
    @include row-align('baseline');
  }
}

// row section with automatically wrapping cols
// ==========================================================================
@mixin row-wrap($value: $row-default-wrap) {
  $values: (
    wrap: 'wrap',
    reverse: 'wrap-reverse',
    nowrap: 'nowrap');

  @if map-has-key($values, $value) {
    flex-wrap: #{map-get($values, $value)};
  }

  @else {
    @error "row-wrap: Please enter a valid property;"nowrap","wrap"or"reverse"";
  }
}

@mixin generate-row-wrap($breakpoint: null) {
  $breakpoint: format-breakpoint($breakpoint);

  &#{$breakpoint}wrap {
    @include row-wrap('wrap');

    > #{$col-namespace} {
      flex-basis: auto;
    }
  }

  &#{$breakpoint}wrap-reverse {
    @include row-wrap('reverse');

    > #{$col-namespace} {
      flex-basis: auto;
    }
  }

  &#{$breakpoint}nowrap {
    @include row-wrap('nowrap');
  }
}

// col order (order is 0 by default)
// ==========================================================================
@mixin col-order($value: 'start') {
  @if ($value == 'start') {
    order: -1;
  }

  @else if($value == 'end') {
    order: $total-columns;
  }

  @else {
    @if (type-of($value) != number) {
      @error "col-order: Please enter a valid property;"start","end"or a number";
    }

    order: $value;
  }
}

@mixin generate-col-order($breakpoint: null) {
  $breakpoint: format-breakpoint($breakpoint);

  &#{$breakpoint}order {
    // Useful for pulling a single col to the front of the row
    &-start {
      @include col-order(start);
    }

    // Useful for pushing a single col to the end of the row
    &-end {
      @include col-order(end);
    }

    // Create offset classes used to control col order
    @for $i from 1 through $total-columns {
      &-#{$i} {
        @include col-order($i - 1);
      }
    }
  }
}


// col positioning through offset
// ========================================================================== */
@mixin generate-col-offset($breakpoint: null) {
  @include col-column-offset($breakpoint);
}

@mixin col-column-offset($breakpoint: null) {
  $breakpoint: format-breakpoint($breakpoint);

  &#{$breakpoint}offset {
    &-0 {
      margin-left: 0;
    }

    @for $i from 1 through $total-columns {
      &-#{$i} {
        @include col-offset($i);
      }
    }
  }
}

@mixin col-offset($value: 1) {
  @if (type-of($value) != number) {
    @error "Please define a number variable.";
  }

  margin-left: (100% / $total-columns) * $value;
}


// Content stretch behavior of individual cols
// ==========================================================================
@mixin col-content-stretch($value: 'stretch') {
  $values: (stretch: 'flex', unstretch: 'inline-block');

  @if map-has-key($values, $value) {
    display: #{map-get($values, $value)};

    > * {
      flex-grow: 1;
    }
  }

  @else {
    @error "col-content-stretch: Please enter a valid property;"stretch", or"unstretch"";
  }
}

@mixin generate-col-content-stretch($breakpoint: null) {
  $breakpoint: format-breakpoint($breakpoint);

  &#{$breakpoint}content-stretch {
    @include col-content-stretch('stretch');
  }

  &#{$breakpoint}content-unstretch {
    @include col-content-stretch('unstretch');
  }
}

// Alignment of individual cols
// ==========================================================================
@mixin col-align($value: 'stretch') {
  $values: (start: 'flex-start', end: 'flex-end', center: 'center', stretch: 'stretch', baseline: 'baseline');

  @if map-has-key($values, $value) {
    align-self: #{map-get($values, $value)};
  }

  @else {
    @error "col-align: Please enter a valid property;"flex-start","flex-end","center","stretch"or"baseline"";
  }
}

@mixin generate-col-align($breakpoint: null) {
  $breakpoint: format-breakpoint($breakpoint);

  &#{$breakpoint}align {
    &-start {
      @include col-align(start);
    }

    &-end {
      @include col-align(end);
    }

    &-center {
      @include col-align(center);
    }

    &-stretch {
      @include col-align(stretch);
    }

    &-baseline {
      @include col-align(baseline);
    }
  }
}

// row or col without gutters
// ==========================================================================

@mixin row-gutter-collapsed($breakpoint: null) {
  $breakpoint: format-breakpoint($breakpoint);

  &#{$breakpoint}collapsed {
    & > #{$col-namespace} {
      @include gutter-collapsed();
    }
  }
}

@mixin row-gutter-expanded($breakpoint: null) {
  $breakpoint: format-breakpoint($breakpoint);

  &#{$breakpoint}expanded {
    & > #{$col-namespace} {
      @include gutter-expanded();
    }
  }
}

@mixin col-gutter-collapsed($breakpoint: null) {
  $breakpoint: format-breakpoint($breakpoint);

  &#{$breakpoint}collapsed {
    @include gutter-collapsed();
  }
}

@mixin col-gutter-expanded($breakpoint: null) {
  $breakpoint: format-breakpoint($breakpoint);

  &#{$breakpoint}expanded {
    @include gutter-expanded();
  }
}

@mixin gutter-collapsed() {
  padding: 0;
}

@mixin gutter-expanded() {
  padding: 0 ($gutter / 2);
}

// Create responsive classes for all additional options
// ==========================================================================
@mixin create-responsive-classes() {
  @each $breakpoint, $size in $breakpoints {
    @media (min-width: $size) {
      // Base
      @include create-cols($breakpoint);
      @include generate-row-layout($breakpoint);
      @include generate-row-content-stretch($breakpoint);

      & > #{$col-namespace} {
        @include generate-col-content-stretch($breakpoint);
      }

      // Optional
      @if $row-align {
        @include generate-row-align($breakpoint);
      }

      @if $row-justify {
        @include generate-row-justify($breakpoint);
      }

      @if $row-wrap {
        @include generate-row-wrap($breakpoint);
      }

      @if $col-order {
        & > #{$col-namespace} {
          @include generate-col-order($breakpoint);
        }
      }

      @if $col-offset {
        & > #{$col-namespace} {
          @include generate-col-offset($breakpoint);
        }
      }

      @if $gutter-collapse {
        @include row-gutter-collapsed($breakpoint);
        @include row-gutter-expanded($breakpoint);

        & > #{$col-namespace} {
          @include col-gutter-collapsed($breakpoint);
          @include col-gutter-expanded($breakpoint);
        }
      }

      @if $col-align {
        & > #{$col-namespace} {
          @include generate-col-align($breakpoint);
        }
      }
    }
  }
}

// Base
// ==========================================================================
@mixin create-row() {
  flex-direction: row;
  box-sizing: border-box;
  display: flex;

  @include row-wrap($row-default-wrap);
  @include row-align($row-default-align);

  margin-right: -($gutter / 2);
  margin-left: -($gutter / 2);

  @include row-content-stretch($row-default-content-stretch);
}

@mixin create-row-col() {
  // Not using flex shorthand because IE 10/11 ignore shorthand declarations with a unitless flex-basis value
  // https://github.com/philipwalton/flexbugs#4-flex-shorthand-declarations-with-unitless-flex-basis-values-are-ignored
  flex-basis: 0%;
  flex-direction: column;
  flex-grow: 1;
  flex-shrink: 1;
  box-sizing: border-box;
  max-width: 100%;
  padding: 0 ($gutter / 2);
}

@mixin generate-full-row() {
  @include create-row();

  > #{$col-namespace} {
    @include create-row-col();
  }
}

@mixin generate-row-layout($breakpoint: null) {
  $breakpoint: format-breakpoint($breakpoint);

  &#{$breakpoint} {
    &horizontal {
      @include row-layout(horizontal);
    }

    &vertical {
      @include row-layout(vertical);

      // Maintain cols as full width rows even if the default row alignment is set to 'start', 'center' or 'end'
      align-items: stretch;

      // IE Fix to prevent cols from not having a height in a vertical row layout
      > #{$col-namespace} {
        flex-basis: auto;
      }
    }
  }
}

@mixin row-layout($value: 'horizontal') {
  $values: (horizontal: 'row', vertical: 'column');

  @if map-has-key($values, $value) {
    flex-direction: #{map-get($values, $value)};
  }

  @else {
    @error "row-layout allowed properties:"horizontal"and"vertical"";
  }
}


// Generate all the things
// ==========================================================================
@mixin base() {
  #{$row-namespace} {
    @include generate-full-row();
    @include generate-row-layout();
    @include generate-all-cols();
    @include generate-row-content-stretch();

    // Optional
    @if $row-align {
      @include generate-row-align();
    }

    @if $row-wrap {
      @include generate-row-wrap();
    }

    @if $col-order {
      & > #{$col-namespace} {
        @include generate-col-order();
      }
    }

    @if $col-offset {
      & > #{$col-namespace} {
        @include generate-col-offset();
      }
    }

    @if $gutter-collapse {
      @include row-gutter-collapsed();
      @include row-gutter-expanded();

      & > #{$col-namespace} {
        @include col-gutter-collapsed();
        @include col-gutter-expanded();
      }
    }

    @if $col-align {
      & > #{$col-namespace} {
        @include generate-col-align();
      }
    }

    & > #{$col-namespace} {
      @include generate-col-content-stretch();
    }

    // Responsive classes
    @include create-responsive-classes();
  }
}

@if ($auto-generate) {
  @include base();
}

#{$row-namespace} {
  > #{$col-namespace}-shrink {
    flex: 0 0 auto;
    max-width: 100%;
  }
}

#{$row-namespace}-unstack {
  > #{$col-namespace} {
    flex: 0 0 100%;
  }
}

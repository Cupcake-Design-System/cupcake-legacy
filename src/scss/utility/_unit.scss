// Removes the unit (e.g. px, em, rem) from a value, returning the number only.

@function strip-unit($num) {
  @return $num / ($num * 0 + 1);
}

// Converts one or more pixel values into matching rem values.

@function rem-calc($values, $base: null) {
  $rem-values: ();
  $count: length($values);

  // If no base is defined, defer to the global font size
  @if $base == null {
    $base: 16px;
  }

  // If the base font size is a %, then multiply it by 16px

  // This is because 100% font size = 16px in most all browsers
  @if unit($base) == '%' {
    $base: ($base / 100%) * 16px;
  }

  @if $count == 1 {
    @return convert-to-rem($values, $base);
  }

  @for $i from 1 through $count {
    $rem-values: append($rem-values, convert-to-rem(nth($values, $i), $base));
  }

  @return $rem-values;
}


// Converts a pixel value to matching rem value. *Any* value passed, regardless of unit, is assumed to be a pixel value. By default, the base pixel value used to calculate the rem value is taken from the `$global-font-size` variable.

@function convert-to-rem($value, $base: null) {
  // Check if the value is a number
  @if type-of($value) != 'number' {
    @warn inspect($value) +"was passed to rem-calc(), which is not a number.";

    @return $value;
  }

  // Calculate rem if units for $value is not rem
  @if unit($value) != 'rem' {
    $value: strip-unit($value) / strip-unit($base) * 1rem;
  }

/* stylelint-disable */
  // Turn 0rem into 0
  @if $value == 0rem {
    $value: 0;
  }
/* stylelint-enable */
  @return $value;
}

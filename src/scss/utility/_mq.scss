$bp-responsive: true !default;
$bp-static-breakpoint: lg !default;
$bp-show-breakpoints: () !default;
$bp-media-type: all !default;
/// Get a breakpoint's width
///  $tablet-width: bp-get-breakpoint-width(tablet);
///  @media (min-width: bp-get-breakpoint-width(desktop)) {}
@function bp-get-breakpoint-width($name, $breakpoint: $breakpoints) {
  @if map-has-key($breakpoint, $name) {
    @return map-get($breakpoint, $name);
  }

  @else {
    @warn "Breakpoint #{$name} wasn't found in $breakpoint.";
  }
}

/// Media Query mixin
/// @example scss
///  .element {
///    @include bp($from: mobile) {
///      color: red;
///    }
///    @include bp($until: tablet) {
///      color: blue;
///    }
///    @include bp(mobile, tablet) {
///      color: green;
///    }
///    @include bp($from: tablet, $and: '(orientation: landscape)') {
///      color: teal;
///    }
///    @include bp(950px) {
///      color: hotpink;

@mixin bp( $from: false, $until: false, $and: false, $media-type: $bp-media-type, $breakpoint: $breakpoints, $responsive: $bp-responsive, $static-breakpoint: $bp-static-breakpoint) {
  $min-width: 0;
  $max-width: 0;
  $media-query: '';
    // From: this breakpoint (inclusive)
  @if $from {
    @if type-of($from)==number {
      $min-width: $from;
    }

    @else {
      $min-width: bp-get-breakpoint-width($from, $breakpoint);
    }
  }

  // Until: that breakpoint (exclusive)
    @if $until {
        @if type-of($until)==number {
            $max-width: $until;
        }
        @else {
            $max-width: bp-get-breakpoint-width($until, $breakpoint) - 10;
        }
    }
    // Responsive support is disabled, rasterize the output outside @media blocks
    // The browser will rely on the cascade itself.
    @if $responsive==false {
        $static-breakpoint-width: mq-get-breakpoint-width($static-breakpoint, $breakpoints);
        $target-width: $static-breakpoint-width;
        // Output only rules that start at or span our target width
        @if ( $and==false and $min-width <=$target-width and ( $until==false or $max-width >=$target-width)) {
            @content;
        }
    }
    // Responsive support is enabled, output rules inside @media queries
    @else {
        @if $min-width !=0 {
            $media-query: '#{$media-query} and (min-width: #{$min-width})';
        }
        @if $max-width !=0 {
            $media-query: '#{$media-query} and (max-width: #{$max-width})';
        }
        @if $and {
            $media-query: '#{$media-query} and #{$and}';
        }
        // Remove unnecessary media query prefix 'all and '
        @if ($media-type=='all' and $media-query !='') {
            $media-type: '';
            $media-query: str-slice(unquote($media-query), 6);
        }
        @media #{$media-type + $media-query} {
            @content;
        }
    }
}

/// Add a breakpoint
///  @include bp-add-breakpoint(tvscreen, 1920px);
///  @include bp(tvscreen) {}
@mixin bp-add-breakpoint($name, $width) {
  $new-breakpoint: ($name: $width);
  $breakpoints: map-merge($breakpoints, $new-breakpoint) !global;
}

///  @include bp-show-breakpoints;
///  @include bp-show-breakpoints((L, XL), (S: 300px, L: 800px, XL: 1200px));
@mixin bp-show-breakpoints($show-breakpoints: $bp-show-breakpoints, $breakpoint: $breakpoints) {
  body:before {
    background-color: #FCF8E3;
    border-bottom: 1px solid #FBEED5;
    border-left: 1px solid #FBEED5;
    color: #C09853;
    font: small-caption;
    padding: 3px 6px;
    pointer-events: none;
    position: fixed;
    right: 0;
    top: 0;
    z-index: 100;

    @each $show-breakpoint in $show-breakpoints {
      $width: bp-get-breakpoint-width($show-breakpoint, $breakpoint);

      @include bp($show-breakpoint, $breakpoint: $breakpoint) {
        content: "#{$show-breakpoint} â‰¥ #{$width} (#{$width)})";
      }
    }
  }
}

@if length($bp-show-breakpoints)>0 {
  @include bp-show-breakpoints;
}
$flex-justify: (
  'start': flex-start,
  'end': flex-end,
  'center': center,
  'space-between': space-between,
  'space-around': space-around,
);

$flex-align: (
  'top': flex-start,
  'bottom': flex-end,
  'center': center,
  'stretch': stretch,
);

@mixin flex {
  display: flex;
}

/// Horizontally or vertically aligns the items within a flex container.
@mixin flex-align($x: null, $y: null) {
  @if $x {
    @if map-has-key($flex-justify, $x) {
      $x: map-get($flex-justify, $x);
    }

    @else {
      @warn "flex-grid-row-align(): #{$x} is not a valid value for horizontal alignment. Use left, right, center, justify, or spaced.";
    }
  }

  @if $y {
    @if map-has-key($flex-align, $y) {
      $y: map-get($flex-align, $y);
    }

    @else {
      @warn "flex-grid-row-align(): #{$y} is not a valid value for vertical alignment. Use top, bottom, middle, or stretch.";
    }
  }

  justify-content: $x;
  align-items: $y;
}

@mixin flex-align-self($y: null) {
  @if $y {
    @if map-has-key($flex-align, $y) {
      $y: map-get($flex-align, $y);
    }

    @else {
      @warn "flex-grid-column-align(): #{$y} is not a valid value for alignment. Use top, bottom, middle, or stretch.";
    }
  }

  align-self: $y;
}

@mixin flex-class-export {
  @each $hdir, $prop in map-remove($flex-justify, left) {
    .c-justify-#{$hdir} {
      @include flex-align($x: $hdir);
    }
  }

  @each $vdir, $prop in $flex-align {
    .c-align-#{$vdir} {
      @include flex-align($y: $vdir);
    }

    .c-align-self-#{$vdir} {
      @include flex-align-self($y: $vdir);
    }
  }
}